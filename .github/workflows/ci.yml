name: ci

on:
  push:
    branches: [main]

jobs:
  smoketest:
    uses: ./.github/workflows/smoketest.yml

  build-and-test:
    runs-on: ubuntu-latest
    needs:
      - smoketest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Wait for MongoDB to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 27017 && echo "MongoDB is ready" && break
            echo "Waiting for MongoDB..." && sleep 5
          done

      - name: Build and run tests
        run: ./gradlew clean build -Dspring.profiles.active=ci

      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-report
          path: build/reports/jacoco/test/html

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  docker-build:
    runs-on: ubuntu-latest
    needs:
      - smoketest
      - build-and-test
    env:
      IMAGE_NAME: salob79/bp-backend
      IMAGE_TAG: latest     

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build clean jar
        run: ./gradlew clean bootJar

      - name: Build Docker image
        run: |
          docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} .

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: salob79/bp-backend:latest

      - name: Log in to Docker Hub
        if: success() # Only log in if the scan passes
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker Hub
        if: success() # Only push if the scan passes
        run: docker push salob79/bp-backend:latest
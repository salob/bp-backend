name: ci

on:
  workflow_call:
    secrets:
      GH_PAT:
        required: true
      SONAR_TOKEN:
        required: true
      GH_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
    outputs:
      image_tag:
        description: "Backend image tag"
        value: ${{ jobs.release.outputs.image_tag }}

jobs:
  smoketest:
    uses: ./.github/workflows/smoketest.yml
    secrets:
      GH_PAT: ${{ secrets.GH_PAT }} 

  ci:
    runs-on: ubuntu-latest
    needs:
      - smoketest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: sianob/bp-backend
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GH_PAT }} # Needed to access private repos

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Wait for MongoDB to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 27017 && echo "MongoDB is ready" && break
            echo "Waiting for MongoDB..." && sleep 5
          done

      - name: Build and run tests
        run: ./gradlew clean build -Dspring.profiles.active=ci

      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-coverage-report
          path: build/reports/jacoco/test/html

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  release:
    runs-on: ubuntu-latest
    needs:
      - ci
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: sianob/bp-backend
          ref: ${{ github.head_ref || github.ref_name }}
          token: ${{ secrets.GH_PAT }} # Needed to access private repos

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build clean jar
        run: ./gradlew clean bootJar

      - name: Set New Release Version
        id: version
        run: |
          # Fetch the latest release tag from the repo
          latest_tag=$(gh release list --repo sianob/bp-backend --limit 1 --json tagName --jq '.[0].tagName')

          echo "Latest tag: $latest_tag"

          # Strip 'v' and split version parts
          version="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$version"

          # Increment patch version
          patch=$((patch + 1))
          new_version="v$major.$minor.$patch"

          echo "New version: $new_version"
          echo "VERSION=$new_version" >> $GITHUB_ENV
          echo "VERSION=$new_version" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: salob79/bp-backend:${{ env.VERSION }},salob79/bp-backend:latest

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: salob79/bp-backend:latest

      - name: Create GitHub Release
        run: |
          echo "Creating release ${{ env.VERSION }} in sianob/bp-backend..."
          gh release create "${{ env.VERSION }}" \
            --repo "sianob/bp-backend" \
            --title "${{ env.VERSION }}" \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Log in to Docker Hub
        if: success() # Only log in if the scan passes
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          echo "Creating release ${{ env.VERSION }} in sianob/bp-frontend..."
          gh release create "${{ env.VERSION }}" \
            --repo "sianob/bp-frontend" \
            --title "${{ env.VERSION }}" \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: salob79/bp-backend:${{ env.VERSION }},salob79/bp-backend:latest
